/**
 * Сотрудники завода по производству золотого песка из воздуха решили поправить свое финансовое положение.
 * Они пробрались на склад завода, где хранился золотой песок трех видов. Один килограмм золотого песка первого вида они смогли бы продать за A1 рублей,
 * второго вида – за A2 рублей, а третьего вида – за A3 рублей. Так получилось, что у сотрудников оказалось с собой только три емкости: первая была
 * рассчитана на B1 килограмм груза, вторая на B2 килограмм, а третья на B3 килограмм. Им надо было заполнить полностью все емкости таким образом,
 * чтобы получить как можно больше денег за весь песок. При заполнении емкостей нельзя смешивать песок разных видов, то есть, в одну емкость помещать
 * более одного вида песка, и заполнять емкости песком так, чтобы один вид песка находился более чем в одной емкости.
 * 
 * 
 * Требуется написать программу, которая определяет, за какую сумму предприимчивые сотрудники смогут продать весь песок в случае наилучшего для себя
 * заполнения емкостей песком.
 * 
 * Входные данные
 * В единственной строке входного файла INPUT.TXT записано 6 натуральных чисел A1, A2, A3, B1, B2, B3, записанных в одной строке через пробел.
 * Все числа не превосходят 100.
 * 
 * Выходные данные
 * В единственную строку выходного файла OUTPUT.TXT нужно вывести единственное целое число – сумму в рублях, которую смогут сотрудники заработать
 * в случае наилучшего для себя заполнения емкостей песком.
 **/

#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

int main() {
	std::ifstream ifs("INPUT.TXT");
	std::ofstream ofs("OUTPUT.TXT");

	std::vector<int16_t> vecA;
	std::vector<int16_t> vecB;
	int res = 0;
	int16_t x, max = 100;
	for (int i = 0; i < 3; i++) {
		ifs >> x;
		vecA.push_back(x);
		if (vecA[i] > 100)
			return 0;
	}
	for (int i = 0; i < 3; i++) {
		ifs >> x;
		vecB.push_back(x);
		if (vecB[i] > 100)
			return 0;
	}
	std::vector<int16_t>::iterator it;
	std::vector<int16_t>::iterator ite;
	for (int i = 1; i <= 3; i++) {
		it = std::max_element(vecA.begin(), vecA.end());
		ite = std::max_element(vecB.begin(), vecB.end());
		res += *it * *ite;
		vecA.erase(it);
		vecB.erase(ite);
	}
	ofs << res;

	ifs.close();
	ofs.close();
	return 0;
}
